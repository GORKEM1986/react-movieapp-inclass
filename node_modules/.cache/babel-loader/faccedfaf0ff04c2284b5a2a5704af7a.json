{"ast":null,"code":"var _jsxFileName = \"/Users/fatihgorkem/Desktop/react-movie/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createUserWithEmailAndPassword, GoogleAuthProvider, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport React, { createContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { auth } from \"../auth/firebase\";\nimport { toastErrorNotify, toastSuccessNotify, toastWarnNotify } from \"../helpers/ToastNotify\"; // export const {Provider} = createContext()\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); //* with custom hook\n// export const useAuthContext = () => {\n//     return useContext(AuthContext);\n//   };\n\nconst AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(JSON.parse(sessionStorage.getItem(\"user\")) || false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    userObserver();\n  }, []);\n\n  const createUser = async (email, password, displayName) => {\n    try {\n      //? yeni bir kullanıcı oluşturmak için kullanılan firebase metodu\n      let userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      console.log(userCredential);\n      await updateProfile(auth.currentUser, {\n        displayName: displayName\n      });\n      navigate(\"/\");\n      toastSuccessNotify(\"Registered Succesfully\");\n    } catch (error) {\n      console.log(error);\n      toastErrorNotify(error.message);\n    }\n  };\n\n  const signIn = async (email, password) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      navigate(\"/\");\n      toastSuccessNotify(\"Logged in Succesfully\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const logOut = () => {\n    signOut(auth);\n  };\n\n  const userObserver = () => {\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        const {\n          email,\n          displayName,\n          photoURL\n        } = user;\n        setCurrentUser({\n          email,\n          displayName,\n          photoURL\n        });\n        sessionStorage.setItem(\"user\", JSON.stringify({\n          email,\n          displayName,\n          photoURL\n        }));\n      } else {\n        setCurrentUser(false);\n        sessionStorage.clear(); // console.log('logged out');\n      }\n    });\n  };\n\n  const signUpProvider = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      console.log(result);\n      toastSuccessNotify(\"Logged in Succesfully!\");\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const forgotPassword = email => {\n    //? Email yoluyla şifre sıfırlama için kullanılan firebase metodu\n    sendPasswordResetEmail(auth, email).then(() => {\n      // Password reset email sent!\n      toastWarnNotify(\"Please check your mail box!\"); // alert(\"Please check your mail box!\");\n    }).catch(err => {\n      toastErrorNotify(err.message); // alert(err.message);\n      // ..\n    });\n  };\n\n  const values = {\n    createUser,\n    signIn,\n    logOut,\n    signUpProvider,\n    forgotPassword,\n    currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AuthContextProvider, \"HqV2tnEhzdqeC2IG8stKn+KcLh4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/fatihgorkem/Desktop/react-movie/src/context/AuthContext.js"],"names":["createUserWithEmailAndPassword","GoogleAuthProvider","onAuthStateChanged","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","React","createContext","useNavigate","useEffect","useState","auth","toastErrorNotify","toastSuccessNotify","toastWarnNotify","AuthContext","AuthContextProvider","children","currentUser","setCurrentUser","JSON","parse","sessionStorage","getItem","navigate","userObserver","createUser","email","password","displayName","userCredential","console","log","error","message","signIn","logOut","user","photoURL","setItem","stringify","clear","signUpProvider","provider","then","result","catch","forgotPassword","err","values"],"mappings":"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","sourcesContent":["import {\n  createUserWithEmailAndPassword,\n  GoogleAuthProvider,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n  updateProfile,\n} from \"firebase/auth\";\nimport React, { createContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { auth } from \"../auth/firebase\";\nimport {\n  toastErrorNotify,\n  toastSuccessNotify,\n  toastWarnNotify,\n} from \"../helpers/ToastNotify\";\n\n// export const {Provider} = createContext()\nexport const AuthContext = createContext();\n//* with custom hook\n// export const useAuthContext = () => {\n//     return useContext(AuthContext);\n//   };\n\nconst AuthContextProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(\n    JSON.parse(sessionStorage.getItem(\"user\")) || false\n  );\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    userObserver();\n  }, []);\n\n  const createUser = async (email, password, displayName) => {\n    try {\n      //? yeni bir kullanıcı oluşturmak için kullanılan firebase metodu\n      let userCredential = await createUserWithEmailAndPassword(\n        auth,\n        email,\n        password\n      );\n      console.log(userCredential);\n\n      await updateProfile(auth.currentUser, {\n        displayName: displayName,\n      });\n      navigate(\"/\");\n      toastSuccessNotify(\"Registered Succesfully\");\n    } catch (error) {\n      console.log(error);\n      toastErrorNotify(error.message);\n    }\n  };\n\n  const signIn = async (email, password) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      navigate(\"/\");\n      toastSuccessNotify(\"Logged in Succesfully\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const logOut = () => {\n    signOut(auth);\n  };\n\n  const userObserver = () => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        const { email, displayName, photoURL } = user;\n        setCurrentUser({ email, displayName, photoURL });\n        sessionStorage.setItem(\n          \"user\",\n          JSON.stringify({ email, displayName, photoURL })\n        );\n      } else {\n        setCurrentUser(false);\n        sessionStorage.clear();\n        // console.log('logged out');\n      }\n    });\n  };\n\n  const signUpProvider = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        console.log(result);\n        toastSuccessNotify(\"Logged in Succesfully!\");\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const forgotPassword = (email) => {\n    //? Email yoluyla şifre sıfırlama için kullanılan firebase metodu\n    sendPasswordResetEmail(auth, email)\n      .then(() => {\n        // Password reset email sent!\n        toastWarnNotify(\"Please check your mail box!\");\n        // alert(\"Please check your mail box!\");\n      })\n      .catch((err) => {\n        toastErrorNotify(err.message);\n        // alert(err.message);\n        // ..\n      });\n  };\n\n  const values = {\n    createUser,\n    signIn,\n    logOut,\n    signUpProvider,\n    forgotPassword,\n    currentUser,\n  };\n  return <AuthContext.Provider value={values}>{children}</AuthContext.Provider>;\n};\n\nexport default AuthContextProvider;\n"]},"metadata":{},"sourceType":"module"}